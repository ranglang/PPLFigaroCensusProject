import com.cra.figaro.language._
import com.cra.figaro.algorithm._
import com.cra.figaro.algorithm.factored._
import com.cra.figaro.algorithm.sampling._
import com.cra.figaro.library.compound._

/*
Apply takes a number of argument elements and a function. The result of Apply is an element whose value is the given function applied to the values of the arguments. Therefore, Apply defines a dependency from the arguments to the result.
Chain takes an argument element and a function that takes a value of the argument and returns a new element. The result of the Chain is an element whose value is generated by taking the value of the argument, applying the function to get a new element, and generating a value from that element. Therefore, Chain also defines a dependency from the argument to the result.

*/

object FakeProject {

	val sq: Int => Int = x => x * x
	val collegeMajor = Select(0.1->'Psychology, 0.2->'ComputerScience, 0.2->'Biology, 0.1 -> 'Astronomy, 0.3 -> 'Accounting, 0.1 -> 'English)

	val gender = Flip(0.5)
	val isEmployed = Flip(0.85)
	//val gender = Select(0.5->"Female", 0.5->"Male")
	//val numChildren = Select(0.5->2, 0.3->1, 0.1->3, 0.1->4)

	// CPD = Conditional Probability Distribution

	/*val hasChildren = CPD(gender, isEmployed,
		(false, false) -> Flip(0.001),
		(false, true)  -> Flip (0.1),
		(true, false)  -> Flip (0.9),
		(true, true)   -> Flip(0.99))*/

	val numChildren = CPD(gender, isEmployed,
		(false, false) -> Flip(0.2),
		(false, true)  -> Flip(0.2),
		(true, false)  -> Flip(0.2),
		(true, true)   -> Flip(0.2))

	val hasChildren = RichCPD(collegeMajor, gender,
		//('ComputerScience, true) -> Flip(0.6),
		//('English, true) -> Flip(0.8),
		(*,*) -> Flip(0.4))

	val hasChildren2 = If(gender,
		Select(0.6 -> false, 0.4->true),
		Select(0.1 -> false, 0.9 -> true))

	def predict() {
		val result = VariableElimination.probability(hasChildren2, true)
		println("Probability has children " + result)
	}

	def infer() {
		gender.observe(false)
		val result = VariableElimination.probability(hasChildren, true)
		println("Probability that male has children: " + result)
	}

	private class Person {
		val gender = Flip(0.5)
	}


	def main(args: Array[String]) {
		// true is female?
		gender.observe(true)

		val alg = MetropolisHastings(20000, ProposalScheme.default, collegeMajor)
		alg.start()
		println(alg.probability(collegeMajor, 'Astronomy))
		println(alg.probability(collegeMajor, 'English))
		println(alg.probability(collegeMajor, 'Biology))
		
		predict()
		infer()



		alg.kill()
	}
}